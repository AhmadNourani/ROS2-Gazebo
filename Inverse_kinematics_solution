import rclpy
from rclpy.node import Node
from builtin_interfaces.msg import Duration
from trajectory_msgs.msg import JointTrajectory , JointTrajectoryPoint
import numpy as np
import sys
import ikpy.chain
import os
from ament_index_python.packages import get_package_share_directory

class Trajectory_publisher(Node):

    def __init__(self):
        super().__init__('trajectory_publsiher_node')
        publish_topic = "/joint_trajectory_controller/joint_trajectory"
        self.trajectory_publihser = self.create_publisher(JointTrajectory,publish_topic, 10)
        timer_period = 1
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.joints = ['6RJ1','6RJ2','6RJ3','6RJ4','6RJ5','6RJ6']

        self.robot_initialize()
        argv = sys.argv[1:]
        startxyz=(float(argv[0]),float(argv[1]),float(argv[2]))
        startjoint=self.inverse_kinematics_solution(float(argv[0]),float(argv[1]),float(argv[2]))
        self.goal_positions=list(startjoint)
        endxyz=(float(argv[3]),float(argv[4]),float(argv[5]))
        endjoint=self.inverse_kinematics_solution(float(argv[3]),float(argv[4]),float(argv[5]))
        timexyz=float(argv[6])
        shomarande=0
        while shomarande <= (timexyz):
            xpose=((float(argv[3])-float(argv[0]))/timexyz)*shomarande+float(argv[0])
            ypose=((float(argv[4])-float(argv[1]))/timexyz)*shomarande+float(argv[1])
            zpose=((float(argv[5])-float(argv[2]))/timexyz)*shomarande+float(argv[2])

            shomarande+=0.001

            self.goal_positions=list(self.inverse_kinematics_solution(xpose,ypose,zpose))



     

    def timer_callback(self):
        
        bazu_trajectory_msg = JointTrajectory()
        bazu_trajectory_msg.joint_names = self.joints
        ## creating a point
        point = JointTrajectoryPoint()

        point.positions = self.goal_positions
        point.time_from_start = Duration(sec=2)
        ## adding newly created point into trajectory message
        bazu_trajectory_msg.points.append(point)
        self.trajectory_publihser.publish(bazu_trajectory_msg)
        print("\n Trajectory Sent !\n")
    
    def robot_initialize(self):
        urdf_file= ("/home/izan/my_ws/src/urdf_example/description/robotros2control.urdf.xacro")
        self.kuka_robot = ikpy.chain.Chain.from_urdf_file(urdf_file)

    def get_fk_solution(self):
        T=self.kuka_robot.forward_kinematics([0]*7)
        print("\n Transformation matrix \n" , T)
    
    def inverse_kinematics_solution(self,x,y,z):
        angles=self.kuka_robot.inverse_kinematics([x,y,z])
        angles=np.delete(angles,[0])
        
        print ("\n inverse kinematics solution : \n" ,list(angles))
        return list (angles)


def main(args=None):
    rclpy.init(args=args)
    joint_trajectory_object = Trajectory_publisher()

    rclpy.spin(joint_trajectory_object)
    joint_trajectory_object.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
