import rclpy
from rclpy.node import Node
from sensor_msgs.msg import JointState
import numpy as np
import math
from geometry_msgs.msg import PoseStamped, Point, Quaternion


class InverseKinematicsNode(Node):

    def __init__(self):
        super().__init__('inverse_kinematics_node')
        self.subscription = self.create_subscription(
            PoseStamped,
            'robot_pose',
            self.pose_callback,
            10)
        self.publisher_ = self.create_publisher(JointState, 'joint_statess', 10)

        t06 = np.array([[1.00000000e+00     ,-3.84569858e-06       ,-1.95703993e-05    ,7.44986704e+02],
                        [3.84569858e-06     ,1.00000000e+00      ,3.13323028e-11     ,-1.17225024e-03],
                        [1.95703993e-05        ,-1.06594160e-10         ,1.00000000e+00    ,6.61511904e+02]], dtype=np.float64)
        print("input values  ",t06)
        joint_states = JointState()
        joint_states.header.stamp = self.get_clock().now().to_msg()
        joint_states.name = ['6RJ1','6RJ2','6RJ3','6RJ4','6RJ5','6RJ6']
        joint_states.position = list(self.inverse_kinematics(t06))
        print("output values  ",joint_states)
        self.publisher_.publish(joint_states)






        self.a2, self.a3, self.d4 = 600, 145, 661.5
        self.s = np.sin
        self.c = np.cos

    def pose_callback(self, msg):
        t06 = np.array([[1.00000000e+00     ,-3.84569858e-06       ,-1.95703993e-05  , msg.pose.position.x],
                        [3.84569858e-06     ,1.00000000e+00      ,3.13323028e-11 , msg.pose.position.y],
                        [1.95703993e-05        ,-1.06594160e-10         ,1.00000000e+00   , msg.pose.position.z]], dtype=np.float64)
        print("input values  ",t06)
        joint_states = JointState()
        joint_states.header.stamp = self.get_clock().now().to_msg()
        joint_states.name = ['6RJ1','6RJ2','6RJ3','6RJ4','6RJ5','6RJ6']
        joint_states.position = list(self.inverse_kinematics(t06))
        print("\n output values \n ",joint_states)
        self.publisher_.publish(joint_states)

    def inverse_kinematics(self, t06):
        self.s = np.sin
        self.c = np.cos
        self.a2, self.a3, self.d4 = 600, 145, 661.5
 
        r11, r12, r13, r14 = t06[0, 0], t06[0, 1], t06[0, 2], t06[0, 3]
        r21, r22, r23, r24 = t06[1, 0], t06[1, 1], t06[1, 2], t06[1, 3]
        r31, r32, r33, r34 = t06[2, 0], t06[2, 1], t06[2, 2], t06[2, 3]
        r41, r42, r43, r44 = 0, 0, 0, 1

        teta_1 = math.atan(r24/r14)
        cos_teta3 = ((r24/self.s(teta_1))**2 + r34**2 - self.d4**2 - self.a3**2 - self.a2**2) / (2*self.a3*self.a2)
        sin_teta3 = np.array([np.sqrt(1 - cos_teta3**2), -np.sqrt(1 - cos_teta3**2)])
        tetaa_3 = np.array([math.atan(sin_teta3[0]/cos_teta3 + 0.01), math.atan(sin_teta3[1]/cos_teta3 + 0.01)])

        qq = 1
        L = np.zeros((8, 6))

        for i in range(2):
            teta_3 = tetaa_3[i]
            bb = self.a3 + self.a2*self.c(teta_3)*r44
            cc = self.d4 - self.a2*self.s(teta_3)*r44
            s23 = -(-bb*r34 + cc*(self.c(teta_1)*r14 + self.s(teta_1)*r24)) / ((self.c(teta_1)*r14 + self.s(teta_1)*r24)**2 + r34**2)

            c23 = (bb - s23*r34) / (self.c(teta_1)*r14 + self.s(teta_1)*r24)

            tetaa_23 = math.atan(s23/c23)

            teta_2 = tetaa_23 - teta_3

            c_teta5 = np.float128(-s23*self.c(teta_1)*r13 - s23*self.s(teta_1)*r23 + c23*r33)


            s_teta5 = np.array([np.sqrt(1 - c_teta5**2), -np.sqrt(1 - c_teta5**2)])
            print("s=",s_teta5)
            tetaa_5 = np.array([math.atan(s_teta5[0]/c_teta5), math.atan(s_teta5[1]/c_teta5)])

            for j in range(2):
                teta_5 = tetaa_5[j]

                k1 = c23*self.c(teta_1)*r11 - s23*self.s(teta_1)*r21 + c23*r31
                k2 = self.s(teta_1)*r13 - self.c(teta_1)*r23
                teta_4 = math.atan(-k2/k1)

                k3 = -s23*self.c(teta_1)*r11 - s23*self.s(teta_1)*r21 + c23*r31
                k4 = -s23*self.c(teta_1)*r12 - s23*self.s(teta_1)*r22 + c23*r32
                teta_6 = math.atan(-k4/k3)

                L[qq-1, :] = (180/np.pi) * np.array([teta_1, teta_2, teta_3, teta_4, teta_5, teta_6])
                L[qq, :] = (180/np.pi) * np.array([teta_1 + np.pi, teta_2, teta_3 + np.pi, teta_4 + np.pi, teta_5 + np.pi, teta_6 + np.pi])

                qq += 2

        L = L[0, :]
        return L


def main(args=None):
    rclpy.init(args=args)
    inverse_kinematics_node = InverseKinematicsNode()
    rclpy.spin(inverse_kinematics_node)
    inverse_kinematics_node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
